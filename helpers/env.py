from dotenv import dotenv_values
import os

CLICKHOUSE_HOST = 'CLICKHOUSE_HOST' 
CLICKHOUSE_USER = 'CLICKHOUSE_USER' 
CLICKHOUSE_PASSWORD = 'CLICKHOUSE_PASSWORD' 
MAIN_DATABASE = 'MAIN_DATABASE' 
TEMP_DATABASE = 'TEMP_DATABASE' 
METRIKA_COUNTER = 'METRIKA_COUNTER' 
METRIKA_KEY = 'METRIKA_KEY' 
METRIKA_CHAR_LIMIT = 'METRIKA_CHAR_LIMIT' 
TEMP_HIT_TABLE_PREFIX = 'TEMP_HIT_TABLE_PREFIX' 
HIT_TABLE_PREFIX = 'HIT_TABLE_PREFIX' 
TEMP_VISIT_TABLE_PREFIX = 'TEMP_VISIT_TABLE_PREFIX' 
VISIT_TABLE_PREFIX = 'VISIT_TABLE_PREFIX' 
TEMP_VISIT_KEY = 'TEMP_VISIT_KEY' 
TEMP_HIT_KEY = 'TEMP_HIT_KEY' 
ATTRIBUTIONS = 'ATTRIBUTIONS' 
MAIN_VISIT_PRIMARY_KEYS = 'MAIN_VISIT_PRIMARY_KEYS'
MAIN_HIT_PRIMATY_KEYS = 'MAIN_HIT_PRIMATY_KEYS'
FIRST_DATE = 'FIRST_DATE'
DATE_FILE = 'DATE_FILE'
DAY_COUNT = 'DAY_COUNT' 
LOG_ENABLE = 'LOG_ENABLE'

__values: dict[str, str | None] = {
    CLICKHOUSE_HOST: 'localhost',
    CLICKHOUSE_USER: 'root',
    CLICKHOUSE_PASSWORD: 'secret',

    MAIN_DATABASE: 'metrika',
    TEMP_DATABASE: 'temp_metrika',

    METRIKA_COUNTER: None,
    METRIKA_KEY: None,

    FIRST_DATE: None,
    DATE_FILE: 'dates.txt',
    DAY_COUNT: '90',

    METRIKA_CHAR_LIMIT: '3000',

    TEMP_HIT_TABLE_PREFIX: 'temp_hits',
    HIT_TABLE_PREFIX: 'hits',

    TEMP_VISIT_TABLE_PREFIX: 'temp_visits',
    VISIT_TABLE_PREFIX: 'visits',

    TEMP_VISIT_KEY: 'ym:s:visitID UInt64 visitID',
    TEMP_HIT_KEY: 'ym:pv:watchID UInt64 watchID',

    MAIN_VISIT_PRIMARY_KEYS: 'clientID',
    MAIN_HIT_PRIMATY_KEYS: 'clientID',

    ATTRIBUTIONS: 'AUTOMATIC CROSS_DEVICE_LAST CROSS_DEVICE_LAST_YANDEX_DIRECT_CLICK CROSS_DEVICE_FIRST CROSS_DEVICE_LAST_SIGNIFICANT',

    LOG_ENABLE: 'false',

    **dotenv_values(os.path.dirname(os.path.realpath(__file__)) + '/../.env', verbose=False),
}

def env_value_or_error(key: str) -> str:
    val = __values[key]

    if val is None:
        raise Exception('UNDEFINED KEY')

    val = val.strip()

    if val == '':
        raise Exception('UNDEFINED KEY')

    return val
